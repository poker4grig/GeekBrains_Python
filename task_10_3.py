# 3. Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка». В его
# конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть
# реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__floordiv____truediv__()). Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и округление до целого числа деления клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух клеток больше
# нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек
# этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Этот метод
# позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order() вернёт
# строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order() вернёт
# строку: *****\n*****\n*****.
class Cell:
    def __init__(self, part):
        self.part_of_cell = part

    def __add__(self, other):
        return f'общее количество ячеек общей клетки при объединении двух клеткок равняется {self.part_of_cell + other.part_of_cell}'

    def __sub__(self, other):
        if self.part_of_cell - other.part_of_cell > 0:
            return f'общее количество ячеек при вычитании одной клетки из другой равняется {self.part_of_cell - other.part_of_cell}'
        else:
            return f'операция невозможна, итоговое количество клеток должно быть больше нуля'

    def __mul__(self, other):
        return f'при создании общей клетки из двух, общее количество ячеек при умножении равняется {self.part_of_cell * other.part_of_cell}'

    def __floordiv__(self, other):
        return f'при создании общей клетки из двух, общее количество ячеек при делении равняется {self.part_of_cell // other.part_of_cell}'

    def make_order(self, number):
        self.number_in_a_row = number
        self.stars_in_row = "*" * self.number_in_a_row
        self.text = ' '
        self.rows = self.part_of_cell // self.number_in_a_row
        for i in range(self.rows):
            self.text += (self.stars_in_row + '\\n')
        if self.part_of_cell % self.number_in_a_row != 0:
            self.text += "*" * (self.part_of_cell % self.number_in_a_row)
        self.result = self.text.strip('\\n')
        print(self.result)


cell_1 = Cell(12)
cell_2 = Cell(50)
# print(cell_1 + cell_2)
# print(cell_1 - cell_2)
# print(cell_1 * cell_2)
# print(cell_1 // cell_2)
cell_1.make_order(5)
